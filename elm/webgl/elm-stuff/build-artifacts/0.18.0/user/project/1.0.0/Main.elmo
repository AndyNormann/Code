var _user$project$Main$frag = {'src': '\n        precision mediump float;\n        varying vec3 vcolor;\n\n        void main () {\n            gl_FragColor = vec4(vcolor, 1.0);\n            }\n'};
var _user$project$Main$vert = {'src': '\n        attribute vec3 position;\n        attribute vec3 color;\n        uniform mat4 perspective;\n        varying vec3 vcolor;\n\n        void main() {\n            gl_Position = perspective * vec4(position, 1.0);\n            vcolor = color;\n        }\n'};
var _user$project$Main$perspective = function (t) {
	return A2(
		_elm_community$linear_algebra$Math_Matrix4$mul,
		A4(_elm_community$linear_algebra$Math_Matrix4$makePerspective, 45, 1, 1.0e-2, 100),
		A3(
			_elm_community$linear_algebra$Math_Matrix4$makeLookAt,
			A3(
				_elm_community$linear_algebra$Math_Vector3$vec3,
				4 * _elm_lang$core$Basics$cos(t),
				0,
				4 * _elm_lang$core$Basics$sin(t)),
			A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 0, 0),
			A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 1, 0)));
};
var _user$project$Main$Vertex = F2(
	function (a, b) {
		return {position: a, color: b};
	});
var _user$project$Main$mesh = _elm_community$webgl$WebGL$Triangle(
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple3',
			_0: A2(
				_user$project$Main$Vertex,
				A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 0, 0),
				A3(_elm_community$linear_algebra$Math_Vector3$vec3, 1, 0, 0)),
			_1: A2(
				_user$project$Main$Vertex,
				A3(_elm_community$linear_algebra$Math_Vector3$vec3, 1, 1, 0),
				A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 1, 0)),
			_2: A2(
				_user$project$Main$Vertex,
				A3(_elm_community$linear_algebra$Math_Vector3$vec3, 1, -1, 0),
				A3(_elm_community$linear_algebra$Math_Vector3$vec3, 0, 0, 1))
		},
		_1: {ctor: '[]'}
	});
var _user$project$Main$view = function (t) {
	return A2(
		_elm_community$webgl$WebGL$toHtml,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$width(400),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$height(400),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A4(
				_elm_community$webgl$WebGL$render,
				_user$project$Main$vert,
				_user$project$Main$frag,
				_user$project$Main$mesh,
				{
					perspective: _user$project$Main$perspective(t / 1000)
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: {ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Platform_Cmd$none},
		view: _user$project$Main$view,
		subscriptions: function (model) {
			return _elm_lang$animation_frame$AnimationFrame$diffs(_elm_lang$core$Basics$identity);
		},
		update: F2(
			function (elapsed, currentTime) {
				return {ctor: '_Tuple2', _0: elapsed + currentTime, _1: _elm_lang$core$Platform_Cmd$none};
			})
	})();
var _user$project$Main$Varying = function (a) {
	return {vColor: a};
};
