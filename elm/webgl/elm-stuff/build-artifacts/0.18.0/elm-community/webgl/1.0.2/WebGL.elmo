var _elm_community$webgl$WebGL$computeZModeString = function (mode) {
	var _p0 = mode;
	switch (_p0.ctor) {
		case 'Keep':
			return 'KEEP';
		case 'None':
			return 'ZERO';
		case 'Replace':
			return 'REPLACE';
		case 'Increment':
			return 'INCREMENT';
		case 'Decrement':
			return 'DECREMENT';
		case 'Invert':
			return 'INVERT';
		case 'IncrementWrap':
			return 'INCREMENT_WRAP';
		default:
			return 'DECREMENT_WRAP';
	}
};
var _elm_community$webgl$WebGL$computeFaceModeString = function (mode) {
	var _p1 = mode;
	switch (_p1.ctor) {
		case 'Front':
			return 'FRONT';
		case 'Back':
			return 'BACK';
		default:
			return 'FRONT_AND_BACK';
	}
};
var _elm_community$webgl$WebGL$computeCompareModeString = function (mode) {
	var _p2 = mode;
	switch (_p2.ctor) {
		case 'Never':
			return 'NEVER';
		case 'Always':
			return 'ALWAYS';
		case 'Less':
			return 'LESS';
		case 'LessOrEqual':
			return 'LEQUAL';
		case 'Equal':
			return 'EQUAL';
		case 'GreaterOrEqual':
			return 'GEQUAL';
		case 'Greater':
			return 'Greater';
		default:
			return 'NOTEQUAL';
	}
};
var _elm_community$webgl$WebGL$computeBlendModeString = function (mode) {
	var _p3 = mode;
	switch (_p3.ctor) {
		case 'Add':
			return 'FUNC_ADD';
		case 'Subtract':
			return 'FUNC_SUBTRACT';
		default:
			return 'FUNC_REVERSE_SUBTRACT';
	}
};
var _elm_community$webgl$WebGL$computeBlendOperationString = function (operation) {
	var _p4 = operation;
	switch (_p4.ctor) {
		case 'Zero':
			return 'ZERO';
		case 'One':
			return 'ONE';
		case 'SrcColor':
			return 'SRC_COLOR';
		case 'OneMinusSrcColor':
			return 'ONE_MINUS_SRC_COLOR';
		case 'DstColor':
			return 'DST_COLOR';
		case 'OneMinusDstColor':
			return 'ONE_MINUS_DST_COLOR';
		case 'SrcAlpha':
			return 'SRC_ALPHA';
		case 'OneMinusSrcAlpha':
			return 'ONE_MINUS_SRC_ALPHA';
		case 'DstAlpha':
			return 'DST_ALPHA';
		case 'OneMinusDstAlpha':
			return 'ONE_MINUS_DST_ALPHA';
		case 'ConstantColor':
			return 'CONSTANT_COLOR';
		case 'OneMinusConstantColor':
			return 'ONE_MINUS_CONSTANT_COLOR';
		case 'ConstantAlpha':
			return 'CONSTANT_ALPHA';
		case 'OneMinusConstantAlpha':
			return 'ONE_MINUS_CONSTANT_ALPHA';
		default:
			return 'SRC_ALPHA_SATURATE';
	}
};
var _elm_community$webgl$WebGL$computeCapabilityString = function (capability) {
	var _p5 = capability;
	switch (_p5.ctor) {
		case 'Blend':
			return 'BLEND';
		case 'CullFace':
			return 'CULL_FACE';
		case 'DepthTest':
			return 'DEPTH_TEST';
		case 'Dither':
			return 'DITHER';
		case 'PolygonOffsetFill':
			return 'POLYGON_OFFSET_FILL';
		case 'SampleAlphaToCoverage':
			return 'SAMPLE_ALPHA_TO_COVERAGE';
		case 'SampleCoverage':
			return 'SAMPLE_COVERAGE';
		case 'ScissorTest':
			return 'SCISSOR_TEST';
		default:
			return 'STENCIL_TEST';
	}
};
var _elm_community$webgl$WebGL$computeAPICall = function ($function) {
	var _p6 = $function;
	switch (_p6.ctor) {
		case 'Enable':
			return _elm_community$webgl$Native_WebGL.enable(
				_elm_community$webgl$WebGL$computeCapabilityString(_p6._0));
		case 'Disable':
			return _elm_community$webgl$Native_WebGL.disable(
				_elm_community$webgl$WebGL$computeCapabilityString(_p6._0));
		case 'BlendColor':
			return A4(_elm_community$webgl$Native_WebGL.blendColor, _p6._0._0, _p6._0._1, _p6._0._2, _p6._0._3);
		case 'BlendEquation':
			return _elm_community$webgl$Native_WebGL.blendEquation(
				_elm_community$webgl$WebGL$computeBlendModeString(_p6._0));
		case 'BlendEquationSeparate':
			var modeAlpha = _elm_community$webgl$WebGL$computeBlendModeString(_p6._0._1);
			var modeRGB = _elm_community$webgl$WebGL$computeBlendModeString(_p6._0._0);
			return A2(_elm_community$webgl$Native_WebGL.blendEquationSeparate, modeRGB, modeAlpha);
		case 'BlendFunc':
			var dst = _elm_community$webgl$WebGL$computeBlendOperationString(_p6._0._1);
			var src = _elm_community$webgl$WebGL$computeBlendOperationString(_p6._0._0);
			return A2(_elm_community$webgl$Native_WebGL.blendFunc, src, dst);
		case 'DepthFunc':
			return _elm_community$webgl$Native_WebGL.depthFunc(
				_elm_community$webgl$WebGL$computeCompareModeString(_p6._0));
		case 'SampleCoverageFunc':
			return A2(_elm_community$webgl$Native_WebGL.sampleCoverage, _p6._0._0, _p6._0._1);
		case 'StencilFunc':
			var mode = _elm_community$webgl$WebGL$computeCompareModeString(_p6._0._0);
			return A3(_elm_community$webgl$Native_WebGL.stencilFunc, mode, _p6._0._1, _p6._0._2);
		case 'StencilFuncSeparate':
			var mode = _elm_community$webgl$WebGL$computeCompareModeString(_p6._0._1);
			var face = _elm_community$webgl$WebGL$computeFaceModeString(_p6._0._0);
			return A4(_elm_community$webgl$Native_WebGL.stencilFuncSeparate, face, mode, _p6._0._2, _p6._0._3);
		case 'StencilOperation':
			var zpass = _elm_community$webgl$WebGL$computeZModeString(_p6._0._2);
			var zfail = _elm_community$webgl$WebGL$computeZModeString(_p6._0._1);
			var fail = _elm_community$webgl$WebGL$computeZModeString(_p6._0._0);
			return A3(_elm_community$webgl$Native_WebGL.stencilOperation, fail, zfail, zpass);
		default:
			var zpass = _elm_community$webgl$WebGL$computeZModeString(_p6._0._3);
			var zfail = _elm_community$webgl$WebGL$computeZModeString(_p6._0._2);
			var fail = _elm_community$webgl$WebGL$computeZModeString(_p6._0._1);
			var face = _elm_community$webgl$WebGL$computeFaceModeString(_p6._0._0);
			return A4(_elm_community$webgl$Native_WebGL.stencilOperationSeparate, face, fail, zfail, zpass);
	}
};
var _elm_community$webgl$WebGL$computeAPICalls = function (functionCalls) {
	return A2(_elm_lang$core$List$map, _elm_community$webgl$WebGL$computeAPICall, functionCalls);
};
var _elm_community$webgl$WebGL$toHtmlWith = function (functionCalls) {
	return _elm_community$webgl$Native_WebGL.toHtml(
		_elm_community$webgl$WebGL$computeAPICalls(functionCalls));
};
var _elm_community$webgl$WebGL$renderWithConfig = F5(
	function (functionCalls, vert, frag, buffer, uniforms) {
		return A5(
			_elm_community$webgl$Native_WebGL.render,
			vert,
			frag,
			buffer,
			uniforms,
			_elm_community$webgl$WebGL$computeAPICalls(functionCalls));
	});
var _elm_community$webgl$WebGL$render = _elm_community$webgl$WebGL$renderWithConfig(
	{ctor: '[]'});
var _elm_community$webgl$WebGL$textureSize = _elm_community$webgl$Native_WebGL.textureSize;
var _elm_community$webgl$WebGL$loadTextureWithFilter = _elm_community$webgl$Native_WebGL.loadTextureWithFilter;
var _elm_community$webgl$WebGL$unsafeShader = _elm_community$webgl$Native_WebGL.unsafeCoerceGLSL;
var _elm_community$webgl$WebGL$TriangleStrip = function (a) {
	return {ctor: 'TriangleStrip', _0: a};
};
var _elm_community$webgl$WebGL$TriangleFan = function (a) {
	return {ctor: 'TriangleFan', _0: a};
};
var _elm_community$webgl$WebGL$Points = function (a) {
	return {ctor: 'Points', _0: a};
};
var _elm_community$webgl$WebGL$LineLoop = function (a) {
	return {ctor: 'LineLoop', _0: a};
};
var _elm_community$webgl$WebGL$LineStrip = function (a) {
	return {ctor: 'LineStrip', _0: a};
};
var _elm_community$webgl$WebGL$Lines = function (a) {
	return {ctor: 'Lines', _0: a};
};
var _elm_community$webgl$WebGL$Triangle = function (a) {
	return {ctor: 'Triangle', _0: a};
};
var _elm_community$webgl$WebGL$Shader = {ctor: 'Shader'};
var _elm_community$webgl$WebGL$Texture = {ctor: 'Texture'};
var _elm_community$webgl$WebGL$Nearest = {ctor: 'Nearest'};
var _elm_community$webgl$WebGL$Linear = {ctor: 'Linear'};
var _elm_community$webgl$WebGL$loadTexture = _elm_community$webgl$WebGL$loadTextureWithFilter(_elm_community$webgl$WebGL$Linear);
var _elm_community$webgl$WebGL$Error = {ctor: 'Error'};
var _elm_community$webgl$WebGL$Renderable = {ctor: 'Renderable'};
var _elm_community$webgl$WebGL$StencilOperationSeparate = function (a) {
	return {ctor: 'StencilOperationSeparate', _0: a};
};
var _elm_community$webgl$WebGL$StencilOperation = function (a) {
	return {ctor: 'StencilOperation', _0: a};
};
var _elm_community$webgl$WebGL$StencilFuncSeparate = function (a) {
	return {ctor: 'StencilFuncSeparate', _0: a};
};
var _elm_community$webgl$WebGL$StencilFunc = function (a) {
	return {ctor: 'StencilFunc', _0: a};
};
var _elm_community$webgl$WebGL$SampleCoverageFunc = function (a) {
	return {ctor: 'SampleCoverageFunc', _0: a};
};
var _elm_community$webgl$WebGL$DepthFunc = function (a) {
	return {ctor: 'DepthFunc', _0: a};
};
var _elm_community$webgl$WebGL$BlendFunc = function (a) {
	return {ctor: 'BlendFunc', _0: a};
};
var _elm_community$webgl$WebGL$BlendEquationSeparate = function (a) {
	return {ctor: 'BlendEquationSeparate', _0: a};
};
var _elm_community$webgl$WebGL$BlendEquation = function (a) {
	return {ctor: 'BlendEquation', _0: a};
};
var _elm_community$webgl$WebGL$BlendColor = function (a) {
	return {ctor: 'BlendColor', _0: a};
};
var _elm_community$webgl$WebGL$Disable = function (a) {
	return {ctor: 'Disable', _0: a};
};
var _elm_community$webgl$WebGL$Enable = function (a) {
	return {ctor: 'Enable', _0: a};
};
var _elm_community$webgl$WebGL$StencilTest = {ctor: 'StencilTest'};
var _elm_community$webgl$WebGL$ScissorTest = {ctor: 'ScissorTest'};
var _elm_community$webgl$WebGL$SampleCoverage = {ctor: 'SampleCoverage'};
var _elm_community$webgl$WebGL$SampleAlphaToCoverage = {ctor: 'SampleAlphaToCoverage'};
var _elm_community$webgl$WebGL$PolygonOffsetFill = {ctor: 'PolygonOffsetFill'};
var _elm_community$webgl$WebGL$Dither = {ctor: 'Dither'};
var _elm_community$webgl$WebGL$DepthTest = {ctor: 'DepthTest'};
var _elm_community$webgl$WebGL$defaultConfiguration = {
	ctor: '::',
	_0: _elm_community$webgl$WebGL$Enable(_elm_community$webgl$WebGL$DepthTest),
	_1: {ctor: '[]'}
};
var _elm_community$webgl$WebGL$toHtml = _elm_community$webgl$WebGL$toHtmlWith(_elm_community$webgl$WebGL$defaultConfiguration);
var _elm_community$webgl$WebGL$CullFace = {ctor: 'CullFace'};
var _elm_community$webgl$WebGL$Blend = {ctor: 'Blend'};
var _elm_community$webgl$WebGL$SrcAlphaSaturate = {ctor: 'SrcAlphaSaturate'};
var _elm_community$webgl$WebGL$OneMinusConstantAlpha = {ctor: 'OneMinusConstantAlpha'};
var _elm_community$webgl$WebGL$ConstantAlpha = {ctor: 'ConstantAlpha'};
var _elm_community$webgl$WebGL$OneMinusConstantColor = {ctor: 'OneMinusConstantColor'};
var _elm_community$webgl$WebGL$ConstantColor = {ctor: 'ConstantColor'};
var _elm_community$webgl$WebGL$OneMinusDstAlpha = {ctor: 'OneMinusDstAlpha'};
var _elm_community$webgl$WebGL$DstAlpha = {ctor: 'DstAlpha'};
var _elm_community$webgl$WebGL$OneMinusSrcAlpha = {ctor: 'OneMinusSrcAlpha'};
var _elm_community$webgl$WebGL$SrcAlpha = {ctor: 'SrcAlpha'};
var _elm_community$webgl$WebGL$OneMinusDstColor = {ctor: 'OneMinusDstColor'};
var _elm_community$webgl$WebGL$DstColor = {ctor: 'DstColor'};
var _elm_community$webgl$WebGL$OneMinusSrcColor = {ctor: 'OneMinusSrcColor'};
var _elm_community$webgl$WebGL$SrcColor = {ctor: 'SrcColor'};
var _elm_community$webgl$WebGL$One = {ctor: 'One'};
var _elm_community$webgl$WebGL$Zero = {ctor: 'Zero'};
var _elm_community$webgl$WebGL$ReverseSubtract = {ctor: 'ReverseSubtract'};
var _elm_community$webgl$WebGL$Subtract = {ctor: 'Subtract'};
var _elm_community$webgl$WebGL$Add = {ctor: 'Add'};
var _elm_community$webgl$WebGL$NotEqual = {ctor: 'NotEqual'};
var _elm_community$webgl$WebGL$Greater = {ctor: 'Greater'};
var _elm_community$webgl$WebGL$GreaterOrEqual = {ctor: 'GreaterOrEqual'};
var _elm_community$webgl$WebGL$Equal = {ctor: 'Equal'};
var _elm_community$webgl$WebGL$LessOrEqual = {ctor: 'LessOrEqual'};
var _elm_community$webgl$WebGL$Less = {ctor: 'Less'};
var _elm_community$webgl$WebGL$Always = {ctor: 'Always'};
var _elm_community$webgl$WebGL$Never = {ctor: 'Never'};
var _elm_community$webgl$WebGL$FrontAndBack = {ctor: 'FrontAndBack'};
var _elm_community$webgl$WebGL$Back = {ctor: 'Back'};
var _elm_community$webgl$WebGL$Front = {ctor: 'Front'};
var _elm_community$webgl$WebGL$DecrementWrap = {ctor: 'DecrementWrap'};
var _elm_community$webgl$WebGL$IncrementWrap = {ctor: 'IncrementWrap'};
var _elm_community$webgl$WebGL$Invert = {ctor: 'Invert'};
var _elm_community$webgl$WebGL$Decrement = {ctor: 'Decrement'};
var _elm_community$webgl$WebGL$Increment = {ctor: 'Increment'};
var _elm_community$webgl$WebGL$Replace = {ctor: 'Replace'};
var _elm_community$webgl$WebGL$None = {ctor: 'None'};
var _elm_community$webgl$WebGL$Keep = {ctor: 'Keep'};
